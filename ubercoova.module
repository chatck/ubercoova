<?php

define('UBERCOOVA_KILOBYTE', 1024);

/**
 * Load the CA routines.
 */
module_load_include('inc', 'ubercoova', 'includes/ubercoova.ca');

/**
 * Implementation of hook_menu()
 */
function ubercoova_menu() {
  $items = array();
  $items['admin/settings/ubercoova'] = array(
    'title' => 'UberCoova',
    'description' => 'Configure settings for the UberCoova module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ubercoova_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer ubercoova'),
    'file' => 'includes/ubercoova.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm()
 */
function ubercoova_perm() {
  return array('administer ubercoova', 'edit user quota');
}

/**
 * Implementation of hook_form_alter()
 *
 * Verify user login against FreeRADIUS MySQL backend
 * and update in Drupal if required.
 */
function ubercoova_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['#validate'] = is_array($form['#validate']) ? $form['#validate'] : array();
      // Our validate function *MUST* run first.
      array_unshift($form['#validate'], 'ubercoova_user_login_validate');
    break;

    case 'user_profile_form':
      // Hide the email field if the user isn't an administrator and email modification is disabled.
      if (!variable_get('ubercoova_email_modify', 0) && !user_access('administer users')) {
        $form['account']['mail']['#disabled'] = TRUE;
        $form['account']['mail']['#type'] = 'hidden';
      }
      // Append our own submit handler.
      $form['#submit'] = is_array($form['#submit']) ? $form['#submit'] : array();
      $form['#submit'][] = 'ubercoova_profile_form_submit';
      break;
  }
}

/**
 * Override the login form validator and check the user against the
 * freeradius database.
 */
function ubercoova_user_login_validate($form, &$form_state) {

  if (isset($form_state['values']['name']) && $form_state['values']['name'] && isset($form_state['values']['pass']) && $form_state['values']['pass']) {
    // Do not do this for uid 1. Ever.
    $account = user_load(array('name' => $form_state['values']['name']));
    if ($account->uid == 1) {
      return;
    }

    // Grab some variables we need to query the radius database.
    $table = variable_get('ubercoova_table', '');
    $attribute = variable_get('ubercoova_attribute_password', '');
    $rid = variable_get('ubercoova_rid', 0);

    db_set_active('radius');
    $row = db_fetch_array(db_query("SELECT username, value FROM %s WHERE LOWER(username) = LOWER('%s') AND attribute = '%s' AND op = '==' AND value = '%s'", $table, $form_state['values']['name'], $attribute, $form_state['values']['pass']));
    db_set_active();

    if (!empty($row)) {
      // This means the user exists in radius with the given password.
      form_set_value($form['name'], $row['username'], $form_state);
      form_set_value($form['pass'], $row['value'], $form_state);

      // If this username does not exist in the Drupal database, init a
      // new user and save it. If it does exist, make sure the password
      // in Drupal is updated to match the radius one, so the auth check
      // that runs in user.module after this validator will succeed.
      if ($account->uid == 0) {
        $user_attributes = array(
          'name' => $form_state['values']['name'],
          'pass' => $form_state['values']['pass'],
          'mail' => $form_state['values']['name'] . variable_get('ubercoova_email_domain', ''),
          'roles' => array_filter(array(DRUPAL_AUTHENTICATED_RID, $rid)),
          'status' => TRUE,
        );
        $new_user = user_save(
          new stdClass(),
          $user_attributes
        );
      }
      else  {
        db_query("UPDATE {users} SET pass = MD5('%s') WHERE uid = %d", $form_state['values']['pass'], $account->uid);
      }
    }
  }
}

/**
 * Submit handler for the user/%/edit form.
 */
function ubercoova_profile_form_submit($form, &$form_state) {
  // The user name is not present in the form if the user has no
  // permissions to edit it. In that case, use the user id from the url.
  if (isset($form_state['values']['name'])) {
    $name = $form_state['values']['name'];
  }
  else {
    $account = user_load(arg(1));
    $name = $account->name;
  }

  $table = variable_get('ubercoova_table', '');
  $password_attribute = variable_get('ubercoova_attribute_password', '');
  $email_attribute = variable_get('ubercoova_attribute_email', '');

  db_set_active('radius');
  if (isset($form_state['values']['pass']) && $form_state['values']['pass'] && !empty($password_attribute)) {
    db_query("UPDATE %s SET value = '%s' WHERE username = '%s' AND attribute = '%s' AND op = '=='", $table, $form_state['values']['pass'], $name, $password_attribute);
  }
  if (!empty($email_attribute)) {
    db_query("UPDATE %s SET value = '%s' WHERE username = '%s' AND attribute = '%s' AND op = '=='", $table, $form_state['values']['mail'], $name, $email_attribute);
  }
  db_set_active();
}

/**
 * Implementation of hook_user()
 *
 * Populate an account tab with usage/remaining info.
 */
function ubercoova_user($op, &$edit, &$account, $category = NULL) {
  global $user;
  switch($op) {
    case 'view':
      if ($user->uid && (($user->uid == $account->uid) || user_access('access user profiles'))) {
        $attribute = variable_get('ubercoova_attribute_quota', '');
        $table = variable_get('ubercoova_table', '');
        db_set_active('radius');
        $quota = db_result(db_query("SELECT value FROM " . $table . " WHERE username = '%s' and attribute = '%s' AND op = ':='", $account->name, $attribute));
        db_set_active();

        $account->content['quota'] = array(
          '#type' => 'user_profile_category',
          '#weight' => -6,
          '#title' => t('Quota'),
          'link' => array(
            '#type' => 'user_profile_item',
            '#value' => theme('user_quota', $quota),
          ),
        );

        // There is an orders tab, no need to duplicate this.
        unset($account->content['orders']);
      }
      break;
  }
}

/**
 * Implementation of hook_block()
 */
function ubercoova_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      $blocks[0]['info'] = t('Hotspot login block');
      return $blocks;
      
    case 'view':
      $block = array();
      $block['subject'] = 'Internet Login';
      $block['content'] = drupal_get_form('ubercoova_login_form');
      return $block;
  }
}

/*
  <td class="tableTabBottom">
        <div class="usernameRow">
          <span id="usernameLabel">'.$u.'</span>
          <input name="username" type="text" id="username" size="10"/>
          <span id="passwordField"><span id="passwordLabel">'.$p.'</span>
        <input name="password" type="password" id="password" size="10"/></span>
        </div>
        
        <div class="connectRow">
          <input id="connectButton" type="submit" value="Connect" onClick="connect();"/><span id="logonMessag
*/

/**
 * Return a login form that uses the hotspot javascript guff.
 */
function ubercoova_login_form() {
  $form = array();
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => 'Username',
    '#description' => t('Please enter your username'),
    '#size' => 10,
    '#required' => TRUE,
  );
  $form['password'] = array(
    '#type' => 'password',
    '#title' => 'Password',
    '#description' => t('Please enter your password'),
    '#size' => 10,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'button',
    '#value' => t('Connect'),
    '#attributes' => array('onClick' => 'connect();'),
  );
  $form['#redirect'] = url('hotspot');
  return $form;
}

/**
 * Return a login form that uses the hotspot javascript guff.
 */
function ubercoova_login_form_validate($form, &$form_state) {
  if (empty($form_state['values']['username']))
    form_set_error('username', t('Please enter your username'));
  if (empty($form_state['values']['password']))
    form_set_error('password', t('Please enter your password'));
}

/**
 * Return a login form that uses the hotspot javascript guff.
 */
function ubercoova_login_form_submit($form, &$form_state) {
  dpm($form);
  dpm($form_state);
}


/**
 * Implementation of hook_theme().
 */
function ubercoova_theme() {
  return array(
    'user_quota' => array(
      'arguments' => array($quota => 0),
    ),
  );
}

/**
 * Theme function to display the quota on the /user/% page.
 *
 * @param $quota
 *   A quota in bytes.
 * @return
 *   A translated themed string.
 */
function theme_user_quota($quota) {
  if (empty($quota)) {
    return t("You don't have an Internet access account. To have one created speak to staff at your College.");
  }
  else {
    return t('Your remaining quota is @quota.', array('@quota' => ubercoova_format_size($quota)));
  }
}

/**
 * Taken from Drupal 7.x, to handle units larger than MB.
 *
 * Generate a string representation for the given byte count.
 *
 * @param $size
 *   A size in bytes.
 * @param $langcode
 *   Optional language code to translate to a language other than what is used
 *   to display the page.
 * @return
 *   A translated string representation of the size.
 */
function ubercoova_format_size($size, $langcode = NULL) {
  if ($size < UBERCOOVA_KILOBYTE) {
    return format_plural($size, '1 byte', '@count bytes', array(), $langcode);
  }
  else {
    $size = $size / UBERCOOVA_KILOBYTE; // Convert bytes to kilobytes.
    $units = array(
      t('@size KB', array(), $langcode),
      t('@size MB', array(), $langcode),
      t('@size GB', array(), $langcode),
      t('@size TB', array(), $langcode),
      t('@size PB', array(), $langcode),
      t('@size EB', array(), $langcode),
      t('@size ZB', array(), $langcode),
      t('@size YB', array(), $langcode),
    );
    foreach ($units as $unit) {
      if (round($size, 2) >= UBERCOOVA_KILOBYTE) {
        $size = $size / UBERCOOVA_KILOBYTE;
      }
      else {
        break;
      }
    }
    return str_replace('@size', round($size, 2), $unit);
  }
}
